generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String?         @unique
  name            String?
  password        String?         // Made optional for OAuth-only users
  avatarUrl       String?
  isEmailVerified Boolean         @default(false)
  accounts        Account[] 
  refreshTokens   RefreshToken[]
  PasswordResets  PasswordReset[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastLogin       DateTime?       // Added for security auditing

  // Removed provider field (handled in Account model)
  @@index([email])
}

model Account {
  id                  String   @id @default(cuid())
  provider            String
  providerAccountId   String
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken         String?
  refreshToken        String?   // Critical for OAuth token rotation
  expiresAt           Int?      // Token expiration timestamp
  tokenType           String?
  scope               String?
  idToken             String?   // Added for OpenID Connect (Apple)
  createdAt           DateTime  @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model RefreshToken {
  id          String   @id @default(cuid())
  userId      String
  tokenHash   String   @unique // Prevent token reuse
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  userAgent   String?  // Added for security auditing
  ipAddress   String?  // Added for security auditing

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tokenHash])
}

model EmailOTP {
  id          String   @id @default(cuid())
  email       String
  otpHash     String
  attempts    Int      @default(0)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  used        Boolean  @default(false) // Critical for one-time use
  revoked     Boolean  @default(false)
  userId      String?  // Link to user AFTER verification

  @@unique([email, otpHash]) // Prevent duplicate attempts
  @@index([email])
  @@index([expiresAt])
}

model PasswordReset {
  id          String   @id @default(cuid())
  userId      String
  tokenHash   String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
  userAgent   String?
  ipAddress   String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
}